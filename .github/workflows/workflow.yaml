name: 'Terraform'

on:
  push:
    branches:
      - "main"
      - "release/*"

permissions:
  pull-requests: read

env:
  BUCKET_NAME: "lambdas-grupo12-fiap-2024-cesar-20250110"
  AWS_REGION: "us-east-1"

jobs:
  SetupEnvironment:
    runs-on: ubuntu-latest
    outputs:
      bucket_name: ${{ env.BUCKET_NAME }}
      aws_region: ${{ env.AWS_REGION }}

    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Validate Required Variables
        run: |
          if [ -z "${{ secrets.SENDGRID_API_KEY }}" ] || [ -z "${{ secrets.EMAIL_FROM }}" ] || [ -z "${{ secrets.NAME_FROM }}" ]; then
            echo "Error: One or more required environment variables are empty."
            exit 1
          fi
      - name: Export Secrets for Terraform
        run: |
          echo "SENDGRID_API_KEY=${{ secrets.SENDGRID_API_KEY }}" >> $GITHUB_ENV
          echo "EMAIL_FROM=${{ secrets.EMAIL_FROM }}" >> $GITHUB_ENV
          echo "NAME_FROM=${{ secrets.NAME_FROM }}" >> $GITHUB_ENV

  Build:
    needs: SetupEnvironment
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./src/fiap.hackathon.enviar_email
        shell: bash

    steps:
      - uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 8.0.x

      - name: Restore dependencies
        run: dotnet restore

      - name: Build
        run: dotnet build --configuration Release

  Publish:
    needs: [SetupEnvironment, Build]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./src/fiap.hackathon.enviar_email
        shell: bash

    steps:
      - uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 8.0.x

      - name: Install Amazon Lambda Tools
        run: dotnet tool install -g Amazon.Lambda.Tools

      - name: Publish Lambda Package
        run: dotnet lambda package --configuration Release --output-package ./lambda_enviar_email_function.zip

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Upload to S3
        run: |
          aws s3 cp lambda_enviar_email_function.zip s3://${{ needs.SetupEnvironment.outputs.bucket_name }}/

  CreateLambda:
    needs: Publish
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./infra
        shell: bash

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1

      - name: Terraform Init
        run: terraform init

      - name: Terraform Format
        run: terraform fmt -check

      - name: Create terraform.tfvars
        run: |
          echo "sendgrid_api_key=\"${{ secrets.SENDGRID_API_KEY }}\"" > terraform.tfvars"
          echo "email_from=\"${{ secrets.EMAIL_FROM }}\"" >> terraform.tfvars
          echo "name_from=\"${{ secrets.NAME_FROM }}\"" >> terraform.tfvars

      - name: Terraform Plan
        working-directory: ./infra
        run: terraform plan -input=false

      - name: Apply Terraform
        working-directory: ./infra
        run: terraform apply -auto-approve -input=false